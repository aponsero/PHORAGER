// Base Phorager Pipeline Configuration

// Global default params
params {
    // Workflow control
    workflow = null
    
    // Tool and database selection for installation
    tools = null  // Comma-separated list of tools to install
    databases = null   // Comma-separated list of database to install
    
    // Input/Output directories
    outdir = "$projectDir/results"
    installation_logs_dir = "$projectDir/installations"
    
    // Database and conda locations
    database_location = "$projectDir/databases"
    conda_cache_dir = "$projectDir/conda_cache"
    singularity_cache_dir = "$projectDir/singularity_cache"
    
    // Auto-detect or user-specified
    max_time = '240.h'
    threads = Runtime.runtime.availableProcessors()

    // Bacterial workflow parameters  
    completeness_threshold = 95
    contamination_threshold = 5
    drep_ani_threshold = 0.999

    // Prophage workflow parameters
    run_genomad = true
    run_vibrant = true
    genomad_preset = 'default'          // 'default', 'conservative', 'relaxed'
    vibrant_min_length = 1000           // Minimum scaffold length

    // Annotation workflow parameters
    prophage = null
    min_prophage_length = 5000  // Minimum prophage length for CheckV filtering
    checkv_quality_levels = ['Complete', 'High-quality', 'Medium-quality']  // CheckV quality filtering
    skip_detailed_annotation = false  // Skip pharokka/phold annotation steps
    
    // Annotation filtering parameters (for structural gene filtering)
    annotation_filter_mode = 'both'  // 'pharokka', 'phold', or 'both'
    pharokka_structural_perc = 10.0   // Minimum percentage of structural genes
    pharokka_structural_total = 3     // Minimum total structural genes
    phold_structural_perc = 10.0      // Minimum percentage of structural genes  
    phold_structural_total = 3        // Minimum total structural genes
    
    // Clustering parameters
    clustering_min_ani = 95.0         // Minimum ANI for clustering
    clustering_min_coverage = 85.0    // Minimum coverage for clustering
    
    // External script paths (should be in bin/ directory of pipeline)
    anicalc_script = "$projectDir/bin/anicalc.py"
    aniclust_script = "$projectDir/bin/aniclust.py"
}

// Conda configuration
conda {
    enabled = true
    cacheDir = params.conda_cache_dir
    createTimeout = '120 min'
    channels = ['conda-forge', 'bioconda']
    createOptions = '--strict-channel-priority'
}

// Process configurations
process {
    // Default settings
    executor = 'local'

    // Default: give tools the threads they can use
    cpus = params.threads
    time = params.max_time
    memory = { 4.GB * task.attempt }  // Only scale on retry for failures
    
    errorStrategy = 'retry'
    maxRetries = 2
    
    // Installation process settings
    withLabel: 'tool_install' {
        maxForks = 1  // Install tools sequentially
        memory = '8.GB'
        time = '60 min'
    }

    withLabel: 'database_install' {
        maxForks = 1              // Only run one database download at a time
        memory = '4.GB'           
        time = '2.h'              
        beforeScript = """
            export TMPDIR=\${TMPDIR:-/tmp}
        """
    }

    // Tool-specific compute allocation
    withName: 'CHECKM2' {
        cpus = params.threads  // CheckM2 can use threads effectively
    }
    
    withName: 'DREP' {
        cpus = params.threads  // dRep can use threads for comparisons
    }
    
    withName: 'FILTER_GENOMES' {
        cpus = 1  // Python pandas script - single threaded
    }
    
    withName: 'SUMMARY_REPORT' {
        cpus = 1  // Simple reporting script
    }

    withName: 'GENOMAD' {
        cpus = params.threads
        memory = { 12.GB * task.attempt }
    }
    
    withName: 'VIBRANT' {
        cpus = params.threads
        memory = { 6.GB * task.attempt }
    }
    
    withName: 'PARSE_GENOMAD' {
        cpus = 1
        memory = { 2.GB * task.attempt }
    }
    
    withName: 'PARSE_VIBRANT' {
        cpus = 1
        memory = { 2.GB * task.attempt }
    }
    
    withName: 'COMPARE_PROPHAGES' {
        cpus = 1
        memory = { 4.GB * task.attempt }
    }
    
    withName: 'PROPHAGE_SUMMARY' {
        cpus = 1
        memory = { 2.GB * task.attempt }
    }

    withName: 'CHECKV' {
        cpus = params.threads
    }
    
    withName: 'PHAROKKA' {
        cpus = params.threads
        memory = { 20.GB * task.attempt }  
    }
    
    withName: 'PHOLD' {
        cpus = params.threads
        memory = { 20.GB * task.attempt }
    }
    
    withName: 'CLUSTER_PHAGES' {
        cpus = params.threads 
        memory = { 4.GB * task.attempt }
    }
    
    withName: 'EXTRACT_REPRESENTATIVES' {
        cpus = 1  
        memory = { 2.GB * task.attempt }
    }
    
    // Utility processes (single-threaded Python scripts)
    withName: 'PARSE_CHECKV|SPLIT_FASTA|PARSE_FILTER_ANNOTATIONS|ANNOTATION_SUMMARY' {
        cpus = 1
        memory = { 2.GB * task.attempt }
    }

}