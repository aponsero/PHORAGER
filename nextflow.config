// Global default params, used in configs
params {
    // Workflow flags
    workflow = null

    // Input options
    genome = "$projectDir/data/genome.fa"
    global_db_location = "$projectDir/databases"

    // Output options
    outdir = "$projectDir/results"

    // Conda cache
    conda_cache_dir = "$projectDir/conda_cache"

    // Global thread parameter
    threads = Runtime.runtime.availableProcessors()

    // CheckM2 database location
    checkm2_db_location = "${params.global_db_location}/CheckM2_database" 

    // completeness and contamination filter
    completeness_threshold = 95
    contamination_threshold = 5

    // dRep parameters
    drep_ani_threshold = 0.999 

    // Genomad database location
    genomad_db_location = "${params.global_db_location}/geNomad_database/genomad_db"
    use_dereplicated_genomes = false  // Set to true to use output from bacterial workflow

    // Vibrant database location
    vibrant_db_location = "${params.global_db_location}/vibrant_database"

    // Tool selection for prophage workflow
    run_genomad = true     // Set to false to skip geNomad
    run_vibrant = true     // Set to false to skip VIBRANT

    // CheckV database location
    checkv_db_location = "${params.global_db_location}/checkv_database/checkv-db-v1.5"

    // Annotation workflow input
    prophage_fasta = null  // User can provide their own fasta or use prophage workflow output

    // CheckV filtering parameters
    min_prophage_length = 5000
    checkv_quality_levels = ['Medium-quality', 'High-quality', 'Complete']

    // Pharokka database location
    pharokka_db_location = "${params.global_db_location}/pharokka_database"

    // PHOLD database location
    phold_db_location = "${params.global_db_location}/phold_database"

    // Annotation filtering parameters
    annotation_filter_mode = 'both'           // Options: 'pharokka', 'phold', 'both'
    pharokka_structural_perc = 20.0          // Minimum percentage of structural genes for Pharokka
    pharokka_structural_total = 3            // Minimum number of structural genes for Pharokka
    phold_structural_perc = 20.0             // Minimum percentage of structural genes for PHOLD
    phold_structural_total = 3               // Minimum number of structural genes for PHOLD

    // Annotation workflow control
    skip_detailed_annotation = false  // If true, skips Pharokka and PHOLD steps
    
    // Clustering parameters
    clustering_min_ani = 99.0
    clustering_min_coverage = 85.0
    
    // Paths to clustering scripts
    anicalc_script = "$projectDir/bin/anicalc.py"
    aniclust_script = "$projectDir/bin/aniclust.py"

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory = '25.GB'
    max_cpus = 7
    max_time = '240.h'
    
    // Added explicit mamba parameters
    use_mamba = true
    mamba_command = "mamba"  // Or full path if needed
    
    // Increased conda installation timeout
    conda_install_timeout = '120 min'
    
    // Lower memory limits for conda/mamba solver
    conda_solver_memory = '4GB'
    
    // Cleanup option - disabled by default
    cleanup_conda = false

    // Installation options
    conda_only = false
}

// Apply conda configuration globally
conda {
    enabled = true
    useMamba = params.use_mamba
    cacheDir = params.conda_cache_dir
    createTimeout = params.conda_install_timeout
    channels = ['conda-forge', 'bioconda', 'defaults']
    createOptions = '--no-deps --strict-channel-priority'
}

// Define process-level configurations
process {
    withLabel: 'conda_install' {
        maxForks = 1  // Only run one installation at a time
        memory = '8.GB'  // Limit memory for installation processes
        beforeScript = """
            export CONDA_SOLVER_MEMORY_LIMIT=${params.conda_solver_memory.replace('GB', '') * 1024}
            export MAMBA_NO_LOW_MEMORY_MODE=1
            export CONDA_PKGS_DIRS=${params.conda_cache_dir}/pkgs
            export MAMBA_EXTRACT_THREADS=1
            export MAMBA_DOWNLOAD_THREADS=1
        """
    }
}

profiles {
    standard {
        process.executor = 'local'
    }

    conda {
        conda.enabled = true
        useMamba = params.use_mamba
        conda.channels = ['conda-forge', 'bioconda', 'defaults']
        conda.createTimeout = params.conda_install_timeout
        conda.createOptions = '--strict-channel-priority'
        
        process {
            // Apply the conda_install label to all installation processes
            withName: 'INSTALL_.*' {
                label = 'conda_install'
            }
            
            // Individual process configs - preserving original environments
            withName: 'INSTALL_CHECKM2' {
                conda = "bioconda::checkm2=1.0.1"
            }
            withName: 'CHECKM2' {
                conda = "bioconda::checkm2=1.0.1" 
            }
            withName: 'FILTER_GENOMES' {
                conda = "bioconda::checkm2=1.0.1" 
            }
            withName: 'INSTALL_DREP' {
                conda = "bioconda::drep=3.5.0"
            }
            withName: 'INSTALL_PARSING_ENV' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'DREP' {
                conda = "bioconda::drep=3.5.0"
            }
            withName: 'SUMMARY_REPORT' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'INSTALL_VIBRANT' {
                conda = "bioconda::vibrant=1.2.1"
            }
            withName: 'INSTALL_GENOMAD' {
                conda = "bioconda::genomad=1.8.1"
            }
            withName: 'GENOMAD' {
                conda = "bioconda::genomad=1.8.1" 
            }
            withName: 'VIBRANT' {
                conda = "bioconda::vibrant=1.2.1"
            }
            withName: 'PARSE_GENOMAD' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'PARSE_VIBRANT' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'COMPARE_PROPHAGES' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'PROPHAGE_SUMMARY' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'INSTALL_CHECKV' {
                conda = "conda-forge::python=3.9 bioconda::checkv=1.0.3 bioconda::blast=2.16.0 bioconda::seqfu=1.22.0" 
            }
            withName: 'CHECKV' {
                conda = "conda-forge::python=3.9 bioconda::checkv=1.0.3 bioconda::blast=2.16.0 bioconda::seqfu=1.22.0"
            }
            withName: 'PARSE_CHECKV' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'INSTALL_PHAROKKA' {
                conda = "bioconda::pharokka=1.7.4"
            }
            withName: 'INSTALL_PHOLD' {
                conda = "bioconda::phold=0.2.0"
            }
            withName: 'SPLIT_FASTA' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84" 
            }
            withName: 'PHAROKKA' {
                conda = "bioconda::pharokka=1.7.4"
            }
            withName: 'PHOLD' {
                conda = "bioconda::phold=0.2.0"
            }
            withName: 'PARSE_FILTER_ANNOTATIONS' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
            withName: 'CLUSTER_PHAGES' {
                conda = "conda-forge::python=3.9 bioconda::checkv=1.0.3 bioconda::blast=2.16.0 bioconda::seqfu=1.22.0"	
            }
            withName: 'EXTRACT_REPRESENTATIVES' {
                conda = "conda-forge::python=3.9 bioconda::checkv=1.0.3 bioconda::blast=2.16.0 bioconda::seqfu=1.22.0"
            }
            withName: 'ANNOTATION_SUMMARY' {
                conda = "conda-forge::pandas=2.2.3 conda-forge::biopython=1.84"
            }
        }
    }
}

// Optional cleanup functionality - disabled by default
// Uncomment and set params.cleanup_conda = true if  need to clean specific environments
/*
workflow.onComplete {
    log.info "Pipeline completed - cleaning up conda environments"
    if (params.cleanup_conda) {
        ["bash", "-c", "conda env list | grep ${workflow.sessionId} | cut -d' ' -f1 | xargs -r -L1 conda env remove -y -n"].execute()
    }
}
*/
