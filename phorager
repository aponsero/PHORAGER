#!/usr/bin/env python3
"""
Phorager - Prophage Analysis Pipeline Wrapper

A user-friendly wrapper for the Phorager Nextflow pipeline.
Provides configuration management, tool installation, and workflow execution.
"""

import argparse
import sys
from pathlib import Path

# Add lib directory to path
sys.path.insert(0, str(Path(__file__).parent / 'lib'))

from commands.config import ConfigCommand
from commands.install import InstallCommand
from commands.bacterial import BacterialCommand
from commands.prophage import ProphageCommand
from commands.annotation import AnnotationCommand


def create_parser():
    """Create the argument parser with all subcommands"""
    
    parser = argparse.ArgumentParser(
        description='Phorager - Prophage Analysis Pipeline',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Configure Phorager
  phorager config set --backend conda --db-location /data/databases
  
  # Install tools and databases
  phorager install --tools genome --databases checkm2
  
  # Run bacterial workflow
  phorager bacterial --genome /data/genomes --outdir results/
  
  # Run prophage workflow
  phorager prophage --genome /data/genomes --outdir results/
  
  # Run annotation workflow
  phorager annotation --prophage results/2.Prophage_detection/ --outdir results/
        """
    )
    
    subparsers = parser.add_subparsers(
        dest='command',
        help='Available commands',
        required=True
    )
    
    # Config subcommand
    config_parser = subparsers.add_parser(
        'config',
        help='Manage Phorager configuration',
        description='Configure backend, database location, and cache directory'
    )
    ConfigCommand.add_arguments(config_parser)
    
    # Install subcommand
    install_parser = subparsers.add_parser(
        'install',
        help='Install tools and databases',
        description='Install required tools and databases for Phorager workflows'
    )
    InstallCommand.add_arguments(install_parser)
    
    # Bacterial subcommand
    bacterial_parser = subparsers.add_parser(
        'bacterial',
        help='Run bacterial genome quality control workflow',
        description='Quality control workflow using CheckM2 and dRep'
    )
    BacterialCommand.add_arguments(bacterial_parser)
    
    # Prophage subcommand
    prophage_parser = subparsers.add_parser(
        'prophage',
        help='Run prophage detection workflow',
        description='Prophage detection using GenoMAD and/or VIBRANT'
    )
    ProphageCommand.add_arguments(prophage_parser)
    
    # Annotation subcommand
    annotation_parser = subparsers.add_parser(
        'annotation',
        help='Run prophage annotation and clustering workflow',
        description='Prophage quality assessment, functional annotation, and clustering'
    )
    AnnotationCommand.add_arguments(annotation_parser)
    
    return parser


def main():
    """Main entry point for Phorager wrapper"""
    
    parser = create_parser()
    args = parser.parse_args()
    
    # Route to appropriate command
    if args.command == 'config':
        config_cmd = ConfigCommand()
        success = config_cmd.run(args)
        if success is not True:
            sys.exit(1)
    
    elif args.command == 'install':
        install_cmd = InstallCommand()
        success = install_cmd.run(args)
        if success is not True:
            sys.exit(1)
    
    elif args.command == 'bacterial':
        bacterial_cmd = BacterialCommand()
        success = bacterial_cmd.run(args)
        if success is not True:
            sys.exit(1)
    
    elif args.command == 'prophage':
        prophage_cmd = ProphageCommand()
        success = prophage_cmd.run(args)
        if success is not True:
            sys.exit(1)
    
    elif args.command == 'annotation':
        annotation_cmd = AnnotationCommand()
        success = annotation_cmd.run(args)
        if success is not True:
            sys.exit(1)
    
    else:
        parser.print_help()
        sys.exit(1)


if __name__ == '__main__':
    main()